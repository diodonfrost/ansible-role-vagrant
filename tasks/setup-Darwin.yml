---
# Install Vagrant on osx

- name: Darwin | Find all versions of Vagrant
  ansible.builtin.uri:
    url: https://releases.hashicorp.com/vagrant/index.json
    return_content: true
  register: vagrant_index
  check_mode: false
  when: vagrant_version == 'latest'

- name: Darwin | Finds the latest Vagrant version when latest var is define
  ansible.builtin.set_fact:
    __vagrant_version: "{{ (vagrant_index.content | from_json).versions | list | sort_versions | last }}"
  when: vagrant_version == 'latest'

- name: Linux | Use the specified Vagrant version when latest var is not define
  ansible.builtin.set_fact:
    __vagrant_version: "{{ vagrant_version }}"
  when: vagrant_version != 'latest'

# This task avoids downloading Vagrant every time
- name: Darwin | check if vagrant is present with the right version
  ansible.builtin.command: vagrant --version
  register: vagrant_installed_version
  ignore_errors: true
  changed_when: false
  failed_when: false

- name: Darwin | Install Vagrant
  ansible.builtin.block:

  - name: Darwin | Temporary directory
    ansible.builtin.file:
      path: ./tmp
      mode: '0755'
      state: directory

  - name: Darwin | Download Vagrant
    ansible.builtin.get_url:
      url: "{{ vagrant_pkg_url }}"
      dest: "./tmp/vagrant_{{ __vagrant_version }}_darwin_amd64.dmg"

  - name: Darwin | Mount dmg
    ansible.builtin.command: "hdiutil attach ./tmp/vagrant_{{ __vagrant_version }}_x86_64.dmg -nobrowse -mountpoint ./tmp/vagrant-{{ __vagrant_version }}"
    ignore_errors: true

  - name: Darwin | Install Vagrant
    ansible.builtin.command: installer -pkg ./tmp/vagrant_{{ __vagrant_version }}/vagrant.pkg -target /

  - name: Darwin | Unmount and remove temporary directory
    ansible.builtin.shell: "hdiutil detach ./tmp/vagrant_{{ __vagrant_version }}/ && rm -R ./tmp/"

  when: __vagrant_version not in vagrant_installed_version.stdout | default('')
